import os
import time
import eventlet
import requests
import logging
import telebot
import threading
from database import Subscribers
from variables import Variables

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
db_variables = Variables("subscribers.db")

#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
URL_VK = db_variables.get_variable_value('URL_VK')[0]
BOT_TOKEN = db_variables.get_variable_value('BOT_TOKEN')[0]
access_token = db_variables.get_variable_value('VK_TOKEN')[0]

#CHANNEL_NAME = '431457103' –º–æ–π id

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
db = Subscribers("subscribers.db")


# –ö–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@bot.message_handler(commands=['subscribe'])
def subscribe(message):
    if (not db.subscriber_exists(message.from_user.id)):
        # –ï—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        db.add_subscriber(message.from_user.id)
        bot.send_message(message.chat.id, '–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n–ñ–¥–∏—Ç–µ –≥–æ—Ä—è—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—èüî•')
    else:
        # –ï—Å–ª–∏ —é–∑–µ—Ä –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        db.update_subscription(message.from_user.id, True)
        bot.send_message(message.chat.id, '–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞—ë—Ç–µ—Å—å —Å –Ω–∞–º–∏')


# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø–∏—Å–∫–∏
@bot.message_handler(commands=['unsubscribe'])
def unsubscribe(message):
    if (not db.subscriber_exists(message.from_user.id)):
        # –ï—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, —Ç–æ –¥–æ–±–æ–≤–ª—è–µ–º –µ–≥–æ c –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (–∑–∞–ø–æ–º–∏–Ω–∞–µ–º)
        db.add_subscriber(message.from_user.id, False)
        bot.send_message(message.chat.id, '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
    else:
        # –ï—Å–ª–∏ —é–∑–µ—Ä –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        db.update_subscription(message.from_user.id, False)
        bot.send_message(message.chat.id, '–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å. –ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!')


# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ json —Ñ–æ—Ä–º–∞—Ç–µ
def get_data(groups_name):
    timeout = eventlet.Timeout(10)
    try:
        feed = requests.get(URL_VK, params={
            'domain': groups_name,
            'count': 5,
            'v': 5.126,
            'access_token': access_token
        })
        return feed.json()
    except eventlet.timeout.Timeout:
        logging.warning('Got Timeout while retrieving VK JSON data. Cancelling...')
        return None
    finally:
        timeout.cancel()


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def send_new_posts(items, last_id, groups_name):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –±–æ—Ç–∞ (—Ç–µ —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞—Ç—É—Ç –ø–æ–¥–ø–∏—Å–∫–∏ True)
    subscriptions = db.get_subscriptions()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–π –ø–æ—Å—Ç –Ω–æ–≤–µ–µ —Ç–æ–≥–æ, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∞–∑
    # id –Ω–æ–≤–≥–æ –ø–æ—Å—Ç–∞ –±–æ–ª—å—à–µ, —á–µ–º id —Å—Ç–∞—Ä–æ–≥–æ
    for item in items:
        if item['id'] <= last_id:
            break
        link = 'https://vk.com/{!s}?w=wall{!s}_{!s}'.format(groups_name, item['owner_id'], item['id'])
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–≤—à–∏–º—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for s in subscriptions:
            bot.send_message(s[1], link)
        # –°–ø–∏–º —Å–µ–∫—É–Ω–¥—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–∞–∑–Ω–æ–≥–æ —Ä–æ–¥–∞ –æ—à–∏–±–æ–∫ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π!)
        time.sleep(1)
    return


# –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
def check_new_posts_vk(groups_name):
    # –ü–∏—à–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    logging.info('[VK] Started scanning for new posts')
    '''–ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª .txt —Å id –≥—Ä—É–ø–ø—ã. 
            –ï—Å–ª–∏ –ù–ï–¢, —Ç–æ —Å–æ–∑–¥–∞—ë–º —Ç–∞–∫–æ–π —Ñ–∞–π–ª, –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—É–¥–∞ id
            –ï—Å–ª–∏ –î–ê, —Ç–æ –∑–∞–ø–∏—à–µ–º –≤ —Ñ–∞–π–ª —Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö —Ç–∞–º –Ω–µ—Ç'''
    if not os.path.exists(f'groups_id/{groups_name}_id.txt'):
        with open(f'groups_id/{groups_name}_id.txt', 'wt') as file:
            try:
                fresh_posts_id = []
                feed = get_data(groups_name)
                posts = feed['response']['items']
                for post in posts:
                    fresh_id = post['id']
                    fresh_posts_id.append(fresh_id)
                last_id = fresh_posts_id[4]
                print(fresh_posts_id)
                print(last_id)

                # –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ —Å–ª—É—á–∏–ª—Å—è —Ç–∞–π–º–∞—É—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é. –ï—Å–ª–∏ –≤—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –ø–∞—Ä—Å–∏–º –ø–æ—Å—Ç—ã.
                if feed is not None:
                    # 0 - —ç—Ç–æ –∫–∞–∫–æ–µ-—Ç–æ —á–∏—Å–ª–æ, —Ç–∞–∫ —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º —Å 1
                    entries = feed['response']['items'][1:]
                    try:
                        # –ï—Å–ª–∏ –ø–æ—Å—Ç –±—ã–ª –∑–∞–∫—Ä–µ–ø–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                        tmp = entries[0]['is_pinned']
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        send_new_posts(entries[1:], last_id, groups_name)
                    except KeyError:
                        send_new_posts(entries, last_id, groups_name)
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—É—é "–≤–µ—Ä—Ö—É—à–∫—É" –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è
                    with open(f'groups_id/{groups_name}_id.txt', 'wt') as file:
                        try:
                            tmp = entries[0]['is_pinned']
                            # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç - –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Ç–æ—Ä–æ–≥–æ
                            file.write(str(entries[1]['id']))
                            logging.info('New last_id (VK) is {!s}'.format((entries[1]['id'])))
                        except KeyError:
                            file.write(str(entries[0]['id']))
                            logging.info('New last_id (VK) is {!s}'.format((entries[0]['id'])))
            except Exception as ex:
                logging.error('Exception of type {!s} in check_new_post(): {!s}'.format(type(ex).__name__, str(ex)))
                pass
            logging.info('[VK] Finished scanning')
            return
    else:
        with open(f'groups_id/{groups_name}_id.txt', 'rt') as file:
            last_id = int(file.read())
            if last_id is None:
                logging.error('Could not read from storage. Skipped iteration.')
                return
            logging.info('Previous last_id is {!s}'.format(last_id))
        try:
            feed = get_data(groups_name)
            # –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ —Å–ª—É—á–∏–ª—Å—è —Ç–∞–π–º–∞—É—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é. –ï—Å–ª–∏ –≤—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –ø–∞—Ä—Å–∏–º –ø–æ—Å—Ç—ã.
            if feed is not None:
                # 0 - —ç—Ç–æ –∫–∞–∫–æ–µ-—Ç–æ —á–∏—Å–ª–æ, —Ç–∞–∫ —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º —Å 1
                entries = feed['response']['items'][1:]
                try:
                    # –ï—Å–ª–∏ –ø–æ—Å—Ç –±—ã–ª –∑–∞–∫—Ä–µ–ø–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                    tmp = entries[0]['is_pinned']
                    send_new_posts(entries[1:], last_id, groups_name)
                except KeyError:
                    send_new_posts(entries, last_id, groups_name)
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—É—é "–≤–µ—Ä—Ö—É—à–∫—É" –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è
                with open(f'groups_id/{groups_name}_id.txt', 'wt') as file:
                    try:
                        tmp = entries[0]['is_pinned']
                        # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç - –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Ç–æ—Ä–æ–≥–æ
                        file.write(str(entries[1]['id']))
                        logging.info('New last_id (VK) is {!s}'.format((entries[1]['id'])))
                    except KeyError:
                        file.write(str(entries[0]['id']))
                        logging.info('New last_id (VK) is {!s}'.format((entries[0]['id'])))
        except Exception as ex:
            logging.error('Exception of type {!s} in check_new_post(): {!s}'.format(type(ex).__name__, str(ex)))
            pass
        logging.info('[VK] Finished scanning')
        return

# –ó–∞–¥–∞—ë–º —á–∞—Å—Ç–æ—Ç—É –≤–∫–ª—é—á–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
def pars(groups_name):
    while True:
        for i in groups_name:
            check_new_posts_vk(i)
        time.sleep(60 * 3)

# –°–æ–∑–¥–∞—ë–º –ø–æ–ª–∏–Ω–≥
def pull():
    bot.infinity_polling()


if __name__ == '__main__':
    # –ü–µ—Ä–µ—á–∏—Å–ª–∏–º –≥—Ä—É–ø–ø—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –ø–æ—Å—Ç—ã
    groups_name = ['fa_sales', 'sneakersale', 'hotpricesneakers', 'dealfinder', 'firstretailsoupe',
                   'getsneakers',
                   'buyforboy', 'crazyoffer', 'fa_perfumes', 'sneakersearch', 'dealfinderch', 'cozysale',
                   'dontsellsneakers']
    # –ò–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç —Å–ø–∞–º–∞ –≤ –ª–æ–≥–∞—Ö –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ requests
    logging.getLogger('requests').setLevel(logging.CRITICAL)
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞—à –ª–æ–≥–≥–µ—Ä
    logging.basicConfig(format='[%(asctime)s] %(filename)s:%(lineno)d %(levelname)s - %(message)s', level=logging.INFO,
                        filename='bot_log.log', datefmt='%d.%m.%Y %H:%M:%S')

    # –°–æ–∑–¥–∞—ë–º 2 "–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö" –ø–æ—Ç–æ–∫–∞
    thread1 = threading.Thread(target=pars, args=(groups_name,))
    thread2 = threading.Thread(target=pull, daemon=True)

    thread1.start()
    thread2.start()

    thread1.join()
    thread2.join()
